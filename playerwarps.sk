options:
    prefix: &8┃ <##13a4ed>PWarps &8»&f
    no-perms: &8[&c&l!&8] <##eb3434>You don't have permissions to perform this action!

    # Set the maximum allowed warp name length. It's recommended to not set this value above 64
    max-name-lenght: 20

    max-description-lines: 3
    max-description-lenght-per-line: 64

command /playerwarps [<string>] [<string>]:
    aliases: pw, pwarp
    trigger:
        if arg-1 = "set" or "create":

            arg-2 is not set:
                send "{@prefix} &fUsage&8: &c/pwarp set/create <warp>"
                stop

            loop {playerwarps::*}:
                add 1 to {_currentwarps} if (string tag "PlayerWarp;OwnerUUID" of nbt of loop-value) = uuid of player
                set {_warp} to (string tag "PlayerWarp;Name" of nbt of loop-value)
                uncolored {_warp} = uncolored arg-2
                send "{@prefix} <##eb3434>This warp does already exist!"
                stop

            if (length of uncolored arg-2) > {@max-name-lenght}:
                send "{@prefix} <##eb3434>The name can't be longer than &c{@max-name-lenght} <##eb3434>characters, excluding color codes!"
                stop

            if {_currentwarps} >= getMaxVotes(player):
                player does not have permission "playerwarps.max.infinite"
                send "{@prefix} <##eb3434>You can't place more than &c%getMaxVotes(player)% <##eb3434>warps!"
                stop

            set {_nbt} to (nbt from "{PlayerWarp:{Name:""%arg-2%"",OwnerName:""%player's name%"",OwnerUUID:""%player's uuid%"",CreatedAt:%unix timestamp of now%,Visits:0,Locked:0}}")
            
            set (double list tag "PlayerWarp;Location;pos" of {_nbt}) to (player's x-coord), (player's y-coord) and (player's z-coord)
            set (float list tag "PlayerWarp;Location;facing" of {_nbt}) to (player's yaw) and (player's pitch)
            set (string tag "PlayerWarp;Location;world" of {_nbt}) to (name of player's world)

            add skull of player with nbt from {_nbt} to {playerwarps::*}
            send "{@prefix} &fSuccessfully &acreated &fwarp ""%arg-2%"""
        else if arg-1 = "delete":

            arg-2 is not set:
                send "{@prefix} &fUsage&8: &c/pwarp delete <warp>"
                stop

            loop {playerwarps::*}:
                set {_warp} to (string tag "PlayerWarp;Name" of nbt of loop-value)
                uncolored {_warp} = uncolored arg-2
                set {_item} to loop-value
                stop loop

            if {_item} is not set:
                send "{@prefix} <##eb3434>This warp does not exist!"
                stop

            if player does not have permissions "playerwarps.admin":
                (string tag "PlayerWarp;OwnerUUID" of nbt of {_item}) != uuid of player
                send "{@prefix} <##eb3434>You are not the owner of this warp!"
                stop

            send "{@prefix} &fSuccesfully &cdeleted &fwarp ""%arg-2%"""
            remove {_item} from {playerwarps::*}
        else if arg-1 = "edit":

            arg-2 is not set:
                send "{@prefix} &fUsage&8: &c/pwarp edit <warp>"
                stop

            editWarpGUI(player, arg-2)
        else if getPWarpByName(arg-1) is set:
            teleportToWarp(player, arg-1)
        else:
            openPlayerWarpGUI(player, 1)
            

# ----- [ Tab Completions (require skBee) ] ----- #

on tab complete of "playerwarps" or "pw" or "pwarp":
    loop {playerwarps::*}:
        set {_warp} to (string tag "PlayerWarp;Name" of nbt of loop-value)
        add uncolored {_warp} to {_warps::*}
        tab arg-1 = "delete" or "edit"
        if player does not have permissions "playerwarps.admin":
            (string tag "PlayerWarp;OwnerUUID" of nbt of loop-value) = uuid of player
            add uncolored {_warp} to tab completions for position 2
        else:
            set tab completions for position 2 to {_warps::*}
    set tab completions for position 1 to "set" and "delete" and "edit" and {_warps::*}

# ----- [ Inventory Click Event (PlayerWarp GUI) ] ----- #

on inventory click:
    name of player's current inventory starts with "&8» <##13a4ed>&lPLAYERWARPS &8[&7Page "
    cancel event
    event-inventory = player's current inventory
    type of event-slot != gray stained glass pane or air

    openPlayerWarpGUI(player, {-page::%uuid of player%}-1) if event-slot = 47
    openPlayerWarpGUI(player, {-page::%uuid of player%}+1) if event-slot = 51
    if event-slot = diamond of sharpness 1:
        play sound "entity.chicken.egg" with pitch 2 to player
        openPlayerWarpGUI(player, {-page::%uuid of player%})
    else if event-slot = diamond:
        play sound "entity.chicken.egg" with pitch 2 to player
        openPlayerWarpGUI(player, {-page::%uuid of player%}, true)

    name of event-slot starts with "&8→ "
    click type = left mouse button:
        (int tag "PlayerWarp;Locked" of nbt of event-slot) = 1:
            player does not have permissions "playerwarps.admin"
            (string tag "PlayerWarp;OwnerUUID" of nbt of event-slot) != uuid of player
            send "{@prefix} <##eb3434>This warp is locked!"
            stop
        teleportToWarp(player, (string tag "PlayerWarp;Name" of nbt of event-slot))
        close player's inventory
    else if click type = right mouse button:
        (string tag "PlayerWarp;OwnerUUID" of nbt of event-slot) = uuid of player
        editWarpGUI(player, (string tag "PlayerWarp;Name" of nbt of event-slot))

# ----- [ Inventory Click Event (Warp Editing GUI) ] ----- #

on inventory click:
    name of player's current inventory starts with "&8» <##13a4ed>&lEDIT WARP &8["
    cancel event
    event-inventory = player's current inventory

    set {_warp} to metadata value "editingWarp" of player
    {_warp} is set
 
    if type of event-slot = barrier:
        set {-page::%uuid of player%} to 1 if {-page::%uuid of player%} is not set
        openPlayerWarpGUI(player, {-page::%uuid of player%})
        stop

    set {_item} to getPWarpByName({_warp})
    set {_nbt} to nbt of {_item}

    # Name change
    name of event-slot = "&bChange Name":
        set {-recordChat-name::%uuid of player%} to {_warp}
        close player's inventory
        send "{@prefix} Please enter how you want to name your warp. Type ""cancel"" to cancel."

    # Description change
    name of event-slot = "&bChange Description":
        item cooldown of event-slot for player is not more than 0 seconds
        click type = right mouse button:
            (string list tag "PlayerWarp;Description" of nbt of {_item}) is not set:
                send "{@prefix} You don't have a description set!"
                stop
            remove {_item} from {playerwarps::*}
            delete (string list tag "PlayerWarp;Description" of nbt of {_item})
            add {_item} to {playerwarps::*}
            send "{@prefix} &fDescription &cremoved &fsuccessfully."
            set item cooldown of event-slot for player to 10 ticks
        else:
            set {-recordChat-description::%uuid of player%} to {_warp}
            close player's inventory
            send "{@prefix} Please enter the description of your warp. Type ""cancel"" to cancel."

    # Icon change
    name of event-slot = "&bChange Icon":
        player's tool != air
        remove {_item} from {playerwarps::*}
        add 1 of (type of player's tool) with nbt from {_nbt} to {playerwarps::*}

    # Status change
    name of event-slot = "&bChange Status":
        remove {_item} from {playerwarps::*}
        if (int tag "PlayerWarp;Locked" of {_nbt}) = 0:
            set int tag "PlayerWarp;Locked" of {_nbt} to 1
        else:
            set int tag "PlayerWarp;Locked" of {_nbt} to 0
        add 1 of (type of {_item}) with nbt from {_nbt} to {playerwarps::*}
        set slot 14 of player's current inventory to getLockedStatusItem({_nbt}) named "&bChange Status"

    # Update location
    name of event-slot = "&bUpdate Location":
        remove {_item} from {playerwarps::*}

        set (double list tag "PlayerWarp;Location;pos" of {_nbt}) to (player's x-coord), (player's y-coord) and (player's z-coord)
        set (float list tag "PlayerWarp;Location;facing" of {_nbt}) to (player's yaw) and (player's pitch)
        set (string tag "PlayerWarp;Location;world" of {_nbt}) to (name of player's world)

        add 1 of (type of {_item}) with nbt from {_nbt} to {playerwarps::*}
        send "{@prefix} &fSuccessfully &aupdated &fthe warp location."

# ----- [ Chat Listening Event (Warp name change) ] ----- #

on chat:
    {-recordChat-name::%uuid of player%} or {-recordChat-description::%uuid of player%} is set
    set {_item} to getPWarpByName({-recordChat-name::%uuid of player%} ? {-recordChat-description::%uuid of player%})
    cancel event
    uncolored message != "cancel":
        {-recordChat-name::%uuid of player%} is set:
            length of uncolored message > {@max-name-lenght}:
                send "{@prefix} <##eb3434>The name can't be longer than &c{@max-name-lenght} <##eb3434>characters, excluding color codes!"
                stop
            remove {_item} from {playerwarps::*}
            set string tag "PlayerWarp;Name" of nbt of {_item} to message
            add {_item} to {playerwarps::*}
            editWarpGUI(player, (string tag "PlayerWarp;Name" of nbt of {_item}))
            send "{@prefix} &fName &aupdated &fsuccessfully."
        else if {-recordChat-description::%uuid of player%} is set:
            set {_lore::*} to message split at "\n"
            size of {_lore::*} > {@max-description-lines}:
                send "{@prefix} <##eb3434>The description can't have more than &c{@max-description-lines} <##eb3434>lines!"
                stop
            loop {_lore::*}:
                length of uncolored loop-value > {@max-description-lenght-per-line}
                send "{@prefix} <##eb3434>Each line can't be longer than &c{@max-description-lenght-per-line} <##eb3434>characters, excluding color codes!"
                stop
            remove {_item} from {playerwarps::*}
            set (string list tag "PlayerWarp;Description" of nbt of {_item}) to {_lore::*}
            add {_item} to {playerwarps::*}
            editWarpGUI(player, (string tag "PlayerWarp;Name" of nbt of {_item}))
            send "{@prefix} &fDescription &aupdated &fsuccessfully."
            
    else:
        editWarpGUI(player, {-recordChat-name::%uuid of player%} ? {-recordChat-description::%uuid of player%})
    delete {-recordChat-name::%uuid of player%}
    delete {-recordChat-description::%uuid of player%}


# ----- [ PlayerWarping GUI ] ----- #

function openPlayerWarpGUI(p: player, page: integer, onlyOwned: boolean = false):
    {_page} is set
    if {_onlyOwned} = true:
        set {_list::*} to {playerwarps::*} where [(string tag "PlayerWarp;OwnerUUID" of nbt of input) = uuid of {_p}]
        set {_toggleOwnedItem} to diamond of sharpness 1 with item flag hide enchants
    else:
        set {_list::*} to {playerwarps::*}
    set {_nextpage} to ({_page}+1) if (1st element of (pagination({_list::*}, {_page}+1, 28)) is set)
    set {_previouspage} to ({_page}-1) if (1st element of (pagination({_list::*}, {_page}-1, 28)) is set)
    set {_verified::*} to pagination({_list::*}, {_page}, 28)
    set {_chest} to chest inventory with 6 rows named "&8» <##13a4ed>&lPLAYERWARPS &8[&7Page %{_page}%&8]"
    set {_slots::*} to (numbers between 10 and 16), (numbers between 19 and 25), (numbers between 28 and 34) and (numbers between 37 and 43)
    set {_n} to 1
    set slot (integers between 0 and 8), (17, 26, 35, 44, 9, 18, 27 and 36) and (integers from 45 to 53) of {_chest} to gray stained glass pane named " "
    loop {_verified::*}:
        set {_nbt} to nbt of loop-value

        (string list tag "PlayerWarp;Description" of {_nbt}) is set:
            set {_description::*} to "", "&8┃ &f&lDESCRIPTION&8:"
            loop (string list tag "PlayerWarp;Description" of {_nbt}):
                add "&8› &7%colored loop-value-2%" to {_description::*}

        set {_lore::*} to "", "&8› &fᴏᴡɴᴇʀ&8: &7%string tag "PlayerWarp;OwnerName" of {_nbt}%", "&8› &fᴄʀᴇᴀᴛᴇᴅ ᴀᴛ&8: &7%unix date of double tag "PlayerWarp;CreatedAt" of {_nbt} formatted as "dd.MM.yyyy HH:mm:ss"%", "&8› &fᴠɪsɪᴛs&8: &7%int tag "PlayerWarp;Visits" of {_nbt}%", {_description::*}, ""
        set {_editable} to "%nl%<##42edd1>ʀɪɢʜᴛᴄʟɪᴄᴋ ᴛᴏ ᴇᴅɪᴛ" if (string tag "PlayerWarp;OwnerUUID" of {_nbt}) = uuid of {_p} else ""
        set {_status} to "<##fafc5d>ʟᴇғᴛᴄʟɪᴄᴋ ᴛᴏ ᴛᴇʟᴇᴘᴏʀᴛ" if (int tag "PlayerWarp;Locked" of {_nbt}) != 1 else "<##eb3434>ᴛʜɪs ᴡᴀʀᴘ ɪs ʟᴏᴄᴋᴇᴅ"
        set {_name} to string tag "PlayerWarp;Name" of {_nbt}
        set {_name} to "&8→ <##a857ff>%colored {_name}%" if (int tag "PlayerWarp;Locked" of {_nbt}) != 1 else "&8→ <##eb3434>&m%uncolored {_name}%"
        set slot ({_n}st element of {_slots::*}) of {_chest} to loop-value named {_name} with lore {_lore::*} and "%{_status}%%{_editable}%"
        add 1 to {_n}
    set slot 47 of {_chest} to red dye named "&cPrevious Page &8(&e%{_previouspage}%&8)" if {_previouspage} is set
    set slot 51 of {_chest} to lime dye named "&aNext page &8(&e%{_nextpage}%&8)" if {_nextpage} is set
    set slot 49 of {_chest} to ({_toggleOwnedItem} ? diamond) named "&aOnly Show Owned Warps" with lore "&7This will display only%nl%&7warps that are owned by you."
    set {-page::%uuid of {_p}%} to {_page} ? 1
    open {_chest} to {_p}

function teleportToWarp(p: player, warp: string):

    set {_pLoc} to block below {_p}
    loop reversed 3 times:
        {_pLoc} != block below {_p}:
            send "{@prefix} <##eb3434>Teleport cancelled because you moved!" to {_p}
            stop
        send "{@prefix} &fTeleporting in <##13a4ed>%loop-number% &fsecond. Don't move!" to {_p}
        play sound "block.note_block.bell" with pitch 1 to {_p}
        wait a second

    set {_item} to getPWarpByName({_warp})
    set {_coords::*} to (double list tag "PlayerWarp;Location;pos" of nbt of {_item})
    set {_facing::*} to (float list tag "PlayerWarp;Location;facing" of nbt of {_item})

    set {_world} to (string tag "PlayerWarp;Location;world" of nbt of {_item})

    teleport {_p} to location({_coords::1}, {_coords::2}, {_coords::3}, {_world}, {_facing::1}, {_facing::2})
    play sound "block.note_block.bell" with pitch 2 to {_p}

    int tag "PlayerWarp;Locked" of nbt of {_item} = 0
    remove {_item} from {playerwarps::*}
    add 1 to int tag "PlayerWarp;Visits" of nbt of {_item}
    add {_item} to {playerwarps::*}

function editWarpGUI(p: player, warp: string):

    set {_nbt} to nbt of getPWarpByName({_warp})

    {_nbt} is not set:
        send "{@prefix} <##eb3434>This warp does not exist!" to {_p}
        stop

    {_p} does not have permissions "playerwarps.admin":
        string tag "PlayerWarp;OwnerUUID" of {_nbt} != uuid of {_p}
        send "{@prefix} <##eb3434>You are not the owner of this warp!" to {_p}
        stop

    set metadata value "editingWarp" of {_p} to {_warp}
    set {_gui} to chest inventory with 3 rows named "&8» <##13a4ed>&lEDIT WARP &8[&7%{_warp}%&8]"

    set slot (integers from 0 to 26) of {_gui} to gray stained glass pane named ""
    set slot 11 of {_gui} to name tag named "&bChange Name" with lore "&7Sets the name of the warp."
    set slot 12 of {_gui} to book named "&bChange Description" with lore "&7Sets the description of the warp.", "&cʀɪɢʜᴛᴄʟɪᴄᴋ ᴛᴏ ʀᴇᴍᴏᴠᴇ"
    set {_info} to "%nl%&c(Can't be air)" if {_p}'s tool is air
    set slot 13 of {_gui} to crafting table named "&bChange Icon" with lore "&7Sets the item that you are%nl%&7currently holding as warp icon.%{_info} ? ""%"
    set slot 14 of {_gui} to getLockedStatusItem({_nbt}) named "&bChange Status"
    set slot 15 of {_gui} to empty map named "&bUpdate Location" with lore "&7Sets the location of the warp,%nl%&7to your current position."
    set slot 22 of {_gui} to barrier named "&cGo back"

    open {_gui} to {_p}

function getLockedStatusItem(warp: nbt compound) :: item:
    return red dye with lore "&7Toggles if player's are allowed%nl%&7to teleport to your warp.%nl%%nl%&8› &fsᴛᴀᴛᴜs&8: &cLocked" if int tag "PlayerWarp;Locked" of {_warp} is 1
    return lime dye with lore "&7Toggles if player's are allowed%nl%&7to teleport to your warp.%nl%%nl%&8› &fsᴛᴀᴛᴜs&8: &aOpened"

on inventory close:
    if name of event-inventory starts with "&8» <##13a4ed>&lEDIT WARP &8[":
        wait a tick
        {recordChat::%uuid of player%} is not set
        name of player's current inventory does not start with "&8» <##13a4ed>&lPLAYERWARPS &8[&7Page "
        openPlayerWarpGUI(player, {-page::%uuid of player%})
    else if name of event-inventory starts with "&8» <##13a4ed>&lPLAYERWARPS &8[&7Page ":
        wait a tick
        name of player's current inventory does not start with "&8» <##13a4ed>&lEDIT WARP &8[&7" or "&8» <##13a4ed>&lPLAYERWARPS &8[&7Page "
        delete {-page::%uuid of player%}

# Get warp object from list by name function
function getPWarpByName(warp: string) :: item:
    loop {playerwarps::*}:
        set {_tag} to (string tag "PlayerWarp;Name" of nbt of loop-value)
        uncolored {_tag} = uncolored {_warp}
        return loop-value

function pagination(objects: objects, page: number, elementsPerPage: number) :: objects:
    set {_page} to floor({_page})
    set {_elementsPerPage} to floor({_elementsPerPage})
    set {_startIndex} to ({_page} -1)*{_elementsPerPage}
    loop {_elementsPerPage} times:
        add (({_startIndex} + loop-value)th element out of {_objects::*}) to {_objs::*}
    return {_objs::*}

# Get warp cap from player based of their permission 'playerwarps.max.X'
function getMaxVotes(p: player) :: integer:
    loop permissions of {_p} where [input contains "playerwarps.max."]:
        set {_x::*} to loop-value parsed as "%text%%number%"
        set {_votes} to {_x::2} if {_x::2} > ({_votes} ? 0)
    return ({_votes} ? 2)